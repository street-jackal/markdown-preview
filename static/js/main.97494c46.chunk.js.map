{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","marked","Renderer","setOptions","breaks","gfm","App","props","state","content","updateText","bind","e","this","setState","target","value","onChange","React","Component","Original","id","type","autofocus","label","Formatted","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OC8CG,IAAIQ,IAAOC,SAE5BD,IAAOE,WAAW,CAChBC,QAAQ,EACRC,KAAK,I,IAGDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QA1De,smCA4DjB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALD,E,uDAQRC,GACTC,KAAKC,SACH,CAAEL,QAASG,EAAEG,OAAOC,U,+BAKtB,OACE,gCACE,cAAC,EAAD,CACEC,SAAUJ,KAAKH,WACfD,QAASI,KAAKL,MAAMC,UAEtB,cAAC,EAAD,CAAWA,QAASI,KAAKL,MAAMC,iB,GAtBrBS,IAAMC,WA6BlBC,EAAW,SAAAb,GACf,OACE,gCACE,oBAAIc,GAAG,gBAAP,SAAuB,4BAxCX,6BAyCZ,0BACEA,GAAG,SACHJ,SAAUV,EAAMU,SAChBK,KAAK,OACLN,MAAOT,EAAME,QACbc,UAAU,YACVC,MAAM,mBAMRC,EAAY,SAAAlB,GAChB,OACE,gCACE,oBAAIc,GAAG,iBAAP,SAAwB,4BAzDX,4CA0Db,mBACEA,GAAG,UACHK,wBAAyB,CACvBC,OAAQ1B,IAAOM,EAAME,gBAO/BmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BxC,M","file":"static/js/main.97494c46.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport marked from 'marked';\nimport reportWebVitals from './reportWebVitals';\n\nconst placeholderText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nconst outputName = 'Text With Markdown Formatting Applied';\nconst inputName = 'Raw Text With Markdown';\nconst renderer = new marked.Renderer();\n\nmarked.setOptions({\n  breaks: true,\n  gfm: true\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: placeholderText\n    };\n    this.updateText = this.updateText.bind(this);\n  }\n\n  updateText(e) {\n    this.setState(\n      { content: e.target.value }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Original\n          onChange={this.updateText}\n          content={this.state.content}\n        />\n        <Formatted content={this.state.content} />\n      </div>\n    )\n  }\n\n}\n\nconst Original = props => {\n  return (\n    <div>\n      <h1 id=\"editorHeading\"><b>{inputName}</b></h1>\n      <textarea\n        id='editor'\n        onChange={props.onChange}\n        type='text'\n        value={props.content}\n        autofocus=\"autofocus\"\n        label=\"input text\"\n      />\n    </div>\n  );\n};\n\nconst Formatted = props => {\n  return (\n    <div>\n      <h1 id=\"previewHeading\"><b>{outputName}</b></h1>\n      <p\n        id=\"preview\"\n        dangerouslySetInnerHTML={{\n          __html: marked(props.content)\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}